## app.R

# ---------------------------
# 1. Load Packages & Setup
# ---------------------------
library(shiny)
library(bs4Dash)            # For bs4Dash UI
library(shinycssloaders)    # For spinners on outputs
library(promises)           # For asynchronous processing
library(future)             # For asynchronous tasks
library(netmeta)            # Frequentist network meta-analysis
library(visNetwork)         # For interactive network visualization
library(DT)                 # For interactive tables
library(readr)              # For fast CSV reading
library(igraph)             # For static network plot generation

plan(multisession)          # Set up asynchronous processing

# ---------------------------
# 2. Data Upload Module (Auto-process)
# ---------------------------
dataUploadUI <- function(id) {
  ns <- NS(id)
  tagList(
    fileInput(ns("file"), "Upload CSV Data", accept = ".csv"),
    radioButtons(ns("format"), "Data Format:",
                 choices = c("Arm-level (one row per arm)" = "arm",
                             "Contrast-level (one row per comparison)" = "contrast")),
    checkboxInput(ns("logTrans"), "Log-transform outcome (if needed)", FALSE),
    DTOutput(ns("dataPreview"))
  )
}

dataUploadServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    dataset <- reactiveVal(NULL)
    
    observeEvent(input$file, {
      req(input$file)
      raw <- read_csv(input$file$datapath, show_col_types = FALSE)
      
      if (input$format == "arm") {
        # For hazard ratio analysis using arm-level data, we use "ROM" (ratio of means).
        req_cols <- c("study", "treatment", "mean", "sd", "n")
        if (!all(req_cols %in% names(raw))) {
          showNotification(
            paste("Arm-level data must contain:", paste(req_cols, collapse = ", ")), 
            type = "error"
          )
          return(NULL)
        }
        pw <- pairwise(treat = treatment, mean = mean, sd = sd, n = n,
                       studlab = study, data = raw, sm = "ROM")
        contrast <- as.data.frame(pw)
        processed <- list(raw = raw, contrast = contrast, format = "arm")
      } else {
        req_cols <- c("studlab", "treat1", "treat2", "TE", "seTE")
        if (!all(req_cols %in% names(raw))) {
          showNotification(
            paste("Contrast-level data must contain:", paste(req_cols, collapse = ", ")), 
            type = "error"
          )
          return(NULL)
        }
        processed <- list(raw = raw, contrast = raw, format = "contrast")
      }
      
      # Optionally log-transform TE if needed (if data are not already on the log scale)
      if (input$logTrans && "TE" %in% names(processed$contrast)) {
        processed$contrast$TE <- log(processed$contrast$TE)
      }
      
      dataset(processed)
      output$dataPreview <- renderDT({ datatable(head(processed$contrast, 10)) })
    })
    
    return(reactive({ dataset() }))
  })
}

# ---------------------------
# 3. Network Plot Module
# ---------------------------
networkUI <- function(id) {
  ns <- NS(id)
  tagList(
    selectInput(ns("focus"), "Focus on Treatment:", choices = NULL),
    visNetworkOutput(ns("networkPlot")) %>% withSpinner(),
    br(),
    h4("Customize Static Network Plot (igraph)"),
    fluidRow(
      column(4,
             selectInput(ns("layoutOption"), "Layout:",
                         choices = c("Fruchterman-Reingold" = "layout_with_fr",
                                     "Kamada-Kawai" = "layout_with_kk",
                                     "Reingold-Tilford" = "layout_as_tree",
                                     "Random" = "layout_randomly"),
                         selected = "layout_with_fr")
      ),
      column(4,
             numericInput(ns("vertexSize"), "Vertex Size:", value = 30, min = 10, max = 100)
      ),
      column(4,
             selectInput(ns("vertexColor"), "Vertex Color:",
                         choices = c("skyblue", "red", "green", "blue", "orange", "purple", "gray", "black", "yellow", "pink"),
                         selected = "skyblue")
      )
    ),
    fluidRow(
      column(4,
             numericInput(ns("vertexLabelCex"), "Vertex Label Size:", value = 1.2, min = 0.5, max = 3)
      ),
      column(4,
             selectInput(ns("edgeColor"), "Edge Color:",
                         choices = c("gray", "black", "red", "blue", "green", "orange", "purple"),
                         selected = "gray")
      ),
      column(4,
             numericInput(ns("edgeWidth"), "Edge Width:", value = 1, min = 0.5, max = 5)
      )
    ),
    br(),
    h4("Static Network Plot Preview"),
    plotOutput(ns("staticNetworkPlot")) %>% withSpinner(),
    br(),
    downloadButton(ns("dlNetworkIgraphPNG"), "Download Static Network Plot")
  )
}

networkServer <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    observeEvent(data(), {
      req(data())
      d <- data()
      if (!is.null(d$contrast)) {
        updateSelectInput(session, "focus", choices = unique(c(d$contrast$treat1, d$contrast$treat2)))
      }
    })
    
    networkData <- reactive({
      req(data())
      d <- data()
      if (!is.null(d$contrast) && all(c("treat1", "treat2") %in% names(d$contrast))) {
        nodes <- data.frame(id = unique(c(d$contrast$treat1, d$contrast$treat2)),
                            label = unique(c(d$contrast$treat1, d$contrast$treat2)))
        edges <- data.frame(from = d$contrast$treat1, to = d$contrast$treat2)
        if (!is.null(input$focus) && input$focus != "") {
          edges <- edges[edges$from == input$focus | edges$to == input$focus, ]
        }
        list(nodes = nodes, edges = edges)
      }
    })
    
    output$networkPlot <- renderVisNetwork({
      net <- networkData()
      validate(need(!is.null(net), "No network data available"))
      visNetwork(net$nodes, net$edges, height = "500px", width = "100%") %>% 
        visNodes(shape = "dot", size = 20) %>% 
        visEdges(smooth = FALSE)
    })
    
    output$staticNetworkPlot <- renderPlot({
      req(data())
      d <- data()
      if (!is.null(d$contrast) && all(c("treat1", "treat2") %in% names(d$contrast))) {
        edges <- d$contrast[, c("treat1", "treat2")]
        g <- igraph::graph_from_data_frame(edges, directed = FALSE)
        layoutFunc <- switch(input$layoutOption,
                             layout_with_fr = igraph::layout_with_fr,
                             layout_with_kk = igraph::layout_with_kk,
                             layout_as_tree = igraph::layout_as_tree,
                             layout_randomly = igraph::layout_randomly)
        lay <- layoutFunc(g)
        plot(g, layout = lay,
             vertex.size = input$vertexSize,
             vertex.color = input$vertexColor,
             vertex.label.cex = input$vertexLabelCex,
             edge.color = input$edgeColor,
             edge.width = input$edgeWidth,
             main = "Static Network Plot (igraph)")
      }
    })
    
    output$dlNetworkIgraphPNG <- downloadHandler(
      filename = function() { "NetworkPlot_Static.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        req(data())
        d <- data()
        if (!is.null(d$contrast) && all(c("treat1", "treat2") %in% names(d$contrast))) {
          edges <- d$contrast[, c("treat1", "treat2")]
          g <- igraph::graph_from_data_frame(edges, directed = FALSE)
          layoutFunc <- switch(input$layoutOption,
                               layout_with_fr = igraph::layout_with_fr,
                               layout_with_kk = igraph::layout_with_kk,
                               layout_as_tree = igraph::layout_as_tree,
                               layout_randomly = igraph::layout_randomly)
          lay <- layoutFunc(g)
          plot(g, layout = lay,
               vertex.size = input$vertexSize,
               vertex.color = input$vertexColor,
               vertex.label.cex = input$vertexLabelCex,
               edge.color = input$edgeColor,
               edge.width = input$edgeWidth,
               main = "Static Network Plot (igraph)")
          dev.off()
        } else {
          showNotification("No network data available for download.", type = "error")
        }
      }
    )
  })
}

# ---------------------------
# 4. Analysis Module (Auto-run)
# ---------------------------
analysisUI <- function(id) {
  ns <- NS(id)
  tagList(
    radioButtons(ns("method"), "Analysis Method:",
                 choices = c("Frequentist (netmeta)" = "freq")),
    radioButtons(ns("effectModel"), "Effect Model:",
                 choices = c("Fixed-effect" = "fixed", "Random-effects" = "random"),
                 selected = "random"),
    sliderInput(ns("confLevel"), "Confidence Level:",
                min = 0.80, max = 0.99, value = 0.95, step = 0.01),
    verbatimTextOutput(ns("status"))
  )
}

analysisServer <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    resultContainer <- reactiveVal(NULL)
    
    observeEvent(data(), {
      req(data())
      d_all <- data()
      
      # Isolate reactive inputs before the future call
      localEffectModel <- isolate(input$effectModel)
      localConfLevel   <- isolate(input$confLevel)
      
      output$status <- renderText("Running frequentist analysis...")
      
      future({
        netfit <- netmeta(
          TE, seTE, treat1, treat2, studlab, data = d_all$contrast,
          common = if (localEffectModel == "fixed") TRUE else FALSE,
          random = if (localEffectModel == "random") TRUE else FALSE,
          level = localConfLevel,
          details.chkmultiarm = TRUE
        )
        cat("Number of included studies:", netfit$k, "\n")
        cat("Number of treatments:", netfit$nt, "\n")
        cat("Treatments:", paste(netfit$trts, collapse = ", "), "\n")
        if (!is.null(netfit$studies.excluded) && length(netfit$studies.excluded) > 0) {
          cat("Excluded studies:", paste(netfit$studies.excluded, collapse = ", "), "\n")
        }
        nma_text <- capture.output(print(netfit))
        list(method = "freq", model = netfit, nma_text = paste(nma_text, collapse = "\n"))
      }) %...>% resultContainer
    })
    
    return(reactive({ resultContainer() }))
  })
}

# ---------------------------
# 5. Diagnostics Module
# ---------------------------
diagnosticsUI <- function(id) {
  ns <- NS(id)
  tagList(
    actionButton(ns("runDiagnostics"), "Run Diagnostics"),
    verbatimTextOutput(ns("diagText")),
    plotOutput(ns("funnelPlot")) %>% withSpinner(),
    br(),
    downloadButton(ns("dlFunnelPNG"), "Download Funnel Plot as PNG")
  )
}

diagnosticsServer <- function(id, analysisResult) {
  moduleServer(id, function(input, output, session) {
    observeEvent(input$runDiagnostics, {
      req(analysisResult())
      res <- analysisResult()
      if (res$method != "freq") {
        output$diagText <- renderText("Diagnostics are only available for frequentist analysis.")
      } else {
        diag_res <- decomp.design(res$model)
        output$diagText <- renderPrint({ diag_res })
      }
    })
    output$funnelPlot <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      if (res$method == "freq") {
        ref <- if (!is.null(res$model$trts) && length(res$model$trts) > 0) res$model$trts[1] else ""
        funnel(res$model, order = ref)
      } else {
        plot.new()
        text(0.5, 0.5, "Funnel plot not available.", cex = 1.3)
      }
    })
    output$dlFunnelPNG <- downloadHandler(
      filename = function() { "FunnelPlot.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        res <- analysisResult()
        if (res$method == "freq") {
          ref <- if (!is.null(res$model$trts) && length(res$model$trts) > 0) res$model$trts[1] else ""
          funnel(res$model, order = ref)
        } else {
          plot.new()
          text(0.5, 0.5, "Funnel plot not available.", cex = 1.3)
        }
        dev.off()
      }
    )
  })
}

# ---------------------------
# 6. Results Module (with More Options, More Plots and More Text Results)
# ---------------------------
resultsUI <- function(id) {
  ns <- NS(id)
  tabsetPanel(
    tabPanel("Forest Plot", 
             fluidRow(
               column(3, textInput(ns("forestTitle"), "Plot Title:", value = "Forest Plot")),
               column(3, textInput(ns("forestXlab"), "X-axis Label:", value = "Hazard Ratio")),
               column(3, sliderInput(ns("forestXlim"), "X-axis Range:",
                                     min = 0.1, max = 10, value = c(0.5, 3), step = 0.1)),
               column(3, numericInput(ns("forestCex"), "Label Size (cex):", value = 1, min = 0.5, max = 3, step = 0.1))
             ),
             fluidRow(
               column(3, numericInput(ns("forestDigits"), "Digits (HR):", value = 2, min = 0, max = 5, step = 1)),
               column(3, numericInput(ns("forestDigitsSE"), "Digits (SE):", value = 2, min = 0, max = 5, step = 1)),
               column(3, numericInput(ns("forestDigitsPval"), "Digits (p-val):", value = 3, min = 0, max = 5, step = 1))
             ),
             fluidRow(
               column(3, selectInput(ns("forestSquareColor"), "Square Color:",
                                     choices = c("black", "blue", "red", "green", "purple"), selected = "black")),
               column(3, selectInput(ns("forestDiamondColor"), "Diamond Color:",
                                     choices = c("black", "blue", "red", "green", "purple"), selected = "blue"))
             ),
             br(),
             plotOutput(ns("forestPlot")) %>% withSpinner(),
             br(),
             downloadButton(ns("dlForestPNG"), "Download Forest Plot as PNG")
    ),
    tabPanel("Relative Effects",
             verbatimTextOutput(ns("relativeEffectsText")),
             br(),
             downloadButton(ns("dlRelativeEffects"), "Download Relative Effects Summary")
    ),
    tabPanel("NMA Results", 
             verbatimTextOutput(ns("nmaResults"))
    ),
    tabPanel("Extra Analysis",
             fluidRow(
               column(6, plotOutput(ns("scatterPlot")) %>% withSpinner()),
               column(6, verbatimTextOutput(ns("extraText")))
             )
    ),
    tabPanel("Additional Plots",
             fluidRow(
               column(12, verbatimTextOutput(ns("studySummary")))
             )
    ),
    tabPanel("Excluded Studies",
             verbatimTextOutput(ns("excludedText"))
    ),
    tabPanel("Network Graph",
             fluidRow(
               column(6, textInput(ns("netGraphTitle"), "Graph Title:", value = "Network Graph")),
               column(6, textInput(ns("longLabels"), "Full Treatment Labels (comma separated):", value = "DrugA,DrugB,DrugC,DrugD"))
             ),
             plotOutput(ns("netGraphPlot")) %>% withSpinner(),
             br(),
             downloadButton(ns("dlNetGraphPNG"), "Download Network Graph as PNG")
    ),
    tabPanel("Direct vs Indirect Evidence",
             plotOutput(ns("directIndPlot")) %>% withSpinner(),
             br(),
             downloadButton(ns("dlDirectIndPNG"), "Download Direct/Indirect Evidence Plot as PNG")
    ),
    tabPanel("Effect Estimate Table",
             DTOutput(ns("effectTable")),
             br(),
             downloadButton(ns("dlEffectTable"), "Download Effect Table as CSV")
    ),
    tabPanel("Treatment Ranking",
             DTOutput(ns("treatmentRanking")),
             br(),
             downloadButton(ns("dlTreatmentRanking"), "Download Treatment Ranking as CSV")
    ),
    tabPanel("Net Heat Plot",
             plotOutput(ns("netHeatPlot")) %>% withSpinner(),
             br(),
             downloadButton(ns("dlNetHeatPNG"), "Download Net Heat Plot as PNG")
    ),
    tabPanel("Net Splitting",
             plotOutput(ns("netSplitPlot")) %>% withSpinner(),
             br(),
             downloadButton(ns("dlNetSplitPNG"), "Download Net Split Plot as PNG")
    ),
    tabPanel("Comparison-Adjusted Funnel Plot",
             plotOutput(ns("funnelPlotAdj")) %>% withSpinner(),
             br(),
             downloadButton(ns("dlFunnelAdjPNG"), "Download Funnel Plot as PNG")
    ),
    tabPanel("Leave-One-Out Analysis",
             DTOutput(ns("leaveOneOut")),
             br(),
             downloadButton(ns("dlLeaveOneOut"), "Download Leave-One-Out Table as CSV")
    ),
    tabPanel("Detailed Model Summary",
             verbatimTextOutput(ns("detailedModelSummary")),
             br(),
             downloadButton(ns("dlDetailedModelSummary"), "Download Model Summary as TXT")
    ),
    tabPanel("Study-Level Analysis",
             fluidRow(
               plotOutput(ns("studyLevelPlot"), width = "800px", height = "600px") %>% withSpinner()
             ),
             fluidRow(
               verbatimTextOutput(ns("studyLevelSummary"))
             ),
             br(),
             downloadButton(ns("dlStudyLevel"), "Download Study-Level Analysis as TXT")
    ),
    tabPanel("Additional Text Results",
             verbatimTextOutput(ns("textResults")),
             br(),
             downloadButton(ns("dlTextResults"), "Download Text Results as TXT")
    )
  )
}

resultsServer <- function(id, analysisResult) {
  moduleServer(id, function(input, output, session) {
    # Forest Plot (for HR, we exponentiate the log HR to display HR)
    output$forestPlot <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      if (res$method == "freq") {
        netmeta:::forest.netmeta(
          res$model,
          main = input$forestTitle,
          xlab = input$forestXlab,
          xlim = input$forestXlim,
          cex = input$forestCex,
          digits = input$forestDigits,
          digits.se = input$forestDigitsSE,
          digits.pval = input$forestDigitsPval,
          col.square = input$forestSquareColor,
          col.diamond = input$forestDiamondColor,
          transf = exp
        )
      } else {
        plot.new()
        text(0.5, 0.5, "Forest plot not available.", cex = 1.3)
      }
    })
    
    output$dlForestPNG <- downloadHandler(
      filename = function() { "NMA_ForestPlot.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        res <- analysisResult()
        if (res$method == "freq") {
          netmeta:::forest.netmeta(
            res$model,
            main = input$forestTitle,
            xlab = input$forestXlab,
            xlim = input$forestXlim,
            cex = input$forestCex,
            digits = input$forestDigits,
            digits.se = input$forestDigitsSE,
            digits.pval = input$forestDigitsPval,
            col.square = input$forestSquareColor,
            col.diamond = input$forestDiamondColor,
            transf = exp
          )
        } else {
          plot.new()
          text(0.5, 0.5, "Forest plot not available.", cex = 1.3)
        }
        dev.off()
      }
    )
    
    # Relative Effects
    output$relativeEffectsText <- renderPrint({
      req(analysisResult())
      res <- analysisResult()
      if (res$method == "freq" && !is.null(res$model$trts) &&
          length(unique(res$model$trts)) >= 2) {
        league <- netleague(res$model)
        print(league)
      } else {
        cat("Relative effects summary not available (insufficient treatments).")
      }
    })
    
    output$dlRelativeEffects <- downloadHandler(
      filename = function() { "RelativeEffectsSummary.txt" },
      content = function(file) {
        res <- analysisResult()
        if (res$method == "freq" && !is.null(res$model$trts) &&
            length(unique(res$model$trts)) >= 2) {
          league <- netleague(res$model)
          txt <- capture.output(print(league))
          writeLines(txt, con = file)
        } else {
          writeLines("Relative effects summary not available (insufficient treatments).", con = file)
        }
      }
    )
    
    # NMA Results
    output$nmaResults <- renderPrint({
      req(analysisResult())
      res <- analysisResult()
      cat("=== NMA Analysis Summary ===\n")
      cat(res$nma_text, "\n")
      if (!is.null(res$model$Q)) cat("Q statistic: ", res$model$Q, "\n")
      if (!is.null(res$model$I2)) cat("I-squared: ", res$model$I2, "\n")
      if (!is.null(res$model$tau)) cat("Tau: ", res$model$tau, "\n")
      if (!is.null(res$model$tau^2)) cat("Tau^2: ", res$model$tau^2, "\n")
      if (!is.null(res$model$pval.Q)) cat("p-value (heterogeneity): ", res$model$pval.Q, "\n")
      if (!is.null(res$model$studies.excluded) && length(res$model$studies.excluded) > 0) {
        cat("Excluded studies in this analysis:", paste(res$model$studies.excluded, collapse = ", "), "\n")
      }
    })
    
    # Extra Analysis: Scatter Plot and Extra Text
    output$scatterPlot <- renderPlot({
      req(analysisResult())
      model <- analysisResult()$model
      if (!is.null(model$data)) {
        dat <- model$data
        if (all(c("TE", "seTE") %in% names(dat))) {
          plot(dat$TE, dat$seTE, 
               xlab = "Log Hazard Ratio", 
               ylab = "Standard Error", 
               main = "Scatter Plot of Effect Sizes")
          if ("studlab" %in% names(dat)) {
            text(dat$TE, dat$seTE, labels = dat$studlab, pos = 3, cex = 0.8)
          }
        } else {
          plot.new()
          text(0.5, 0.5, "TE and seTE not found in model$data.")
        }
      } else {
        plot.new()
        text(0.5, 0.5, "Original data not available.")
      }
    })
    
    output$extraText <- renderPrint({
      req(analysisResult())
      model <- analysisResult()$model
      cat("=== Extra Analysis Summary ===\n")
      if (!is.null(model$Q)) cat("Q statistic: ", model$Q, "\n")
      if (!is.null(model$I2)) cat("I-squared: ", model$I2, "\n")
      if (!is.null(model$tau)) cat("Tau: ", model$tau, "\n")
      if (!is.null(model$tau^2)) cat("Tau^2: ", model$tau^2, "\n")
      if (!is.null(model$pval.Q)) cat("p-value (heterogeneity): ", model$pval.Q, "\n")
      if (!is.null(model$data)) {
        cat("\nData summary:\n")
        print(summary(model$data))
      }
    })
    
    # Additional Plots: Study Data Summary
    output$studySummary <- renderPrint({
      req(analysisResult())
      model <- analysisResult()$model
      if (!is.null(model$data)) {
        cat("Study Data Summary:\n")
        print(summary(model$data))
      } else {
        cat("No study data available for summary.")
      }
    })
    
    # Excluded Studies
    output$excludedText <- renderPrint({
      req(analysisResult())
      res <- analysisResult()
      if (res$method == "freq") {
        if (!is.null(res$model$studies.excluded) && length(res$model$studies.excluded) > 0) {
          cat("Excluded Studies:\n")
          print(res$model$studies.excluded)
        } else {
          cat("No excluded studies.")
        }
      } else {
        cat("Excluded studies not available for non-frequentist analysis.")
      }
    })
    
    # --- New Tab: Network Graph ---
    output$netGraphPlot <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      long.labels <- trimws(unlist(strsplit(input$longLabels, split = ",")))
      if (length(long.labels) != length(res$model$trts))
        long.labels <- res$model$trts
      netgraph(res$model, labels = long.labels, main = input$netGraphTitle)
    })
    output$dlNetGraphPNG <- downloadHandler(
      filename = function() { "NetworkGraph.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        req(analysisResult())
        res <- analysisResult()
        long.labels <- trimws(unlist(strsplit(input$longLabels, split = ",")))
        if (length(long.labels) != length(res$model$trts))
          long.labels <- res$model$trts
        netgraph(res$model, labels = long.labels, main = input$netGraphTitle)
        dev.off()
      }
    )
    
    # --- New Tab: Direct vs Indirect Evidence ---
    output$directIndPlot <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      d.evidence <- direct.evidence.plot(res$model)
      plot(d.evidence)
      title("Direct vs Indirect Evidence")
    })
    output$dlDirectIndPNG <- downloadHandler(
      filename = function() { "DirectIndirectEvidence.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        req(analysisResult())
        res <- analysisResult()
        d.evidence <- direct.evidence.plot(res$model)
        plot(d.evidence)
        title("Direct vs Indirect Evidence")
        dev.off()
      }
    )
    
    # --- New Tab: Effect Estimate Table ---
    output$effectTable <- renderDT({
      req(analysisResult())
      res <- analysisResult()
      league <- netleague(res$model)
      datatable(league$fixed, options = list(pageLength = 10))
    })
    output$dlEffectTable <- downloadHandler(
      filename = function() { "EffectEstimateTable.csv" },
      content = function(file) {
        req(analysisResult())
        res <- analysisResult()
        league <- netleague(res$model)
        write.csv(league$fixed, file, row.names = TRUE)
      }
    )
    
    # --- New Tab: Treatment Ranking ---
    output$treatmentRanking <- renderDT({
      req(analysisResult())
      res <- analysisResult()
      ranking <- netrank(res$model, small.values = "good")
      ranking_df <- data.frame(Treatment = names(ranking$ranking.common),
                               PScore = as.numeric(ranking$ranking.common))
      datatable(ranking_df, options = list(pageLength = 10))
    })
    output$dlTreatmentRanking <- downloadHandler(
      filename = function() { "TreatmentRanking.csv" },
      content = function(file) {
        req(analysisResult())
        res <- analysisResult()
        ranking <- netrank(res$model, small.values = "good")
        ranking_df <- data.frame(Treatment = names(ranking$ranking.common),
                                 PScore = as.numeric(ranking$ranking.common))
        write.csv(ranking_df, file, row.names = FALSE)
      }
    )
    
    # --- New Tab: Net Heat Plot ---
    output$netHeatPlot <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      netheat(res$model, random = TRUE)
    })
    output$dlNetHeatPNG <- downloadHandler(
      filename = function() { "NetHeatPlot.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        req(analysisResult())
        res <- analysisResult()
        netheat(res$model, random = TRUE)
        dev.off()
      }
    )
    
    # --- New Tab: Net Splitting ---
    output$netSplitPlot <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      nsplit <- netsplit(res$model)
      plot(nsplit, main = "Net Splitting Analysis")
    })
    output$dlNetSplitPNG <- downloadHandler(
      filename = function() { "NetSplitPlot.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        req(analysisResult())
        res <- analysisResult()
        nsplit <- netsplit(res$model)
        plot(nsplit, main = "Net Splitting Analysis")
        dev.off()
      }
    )
    
    # --- New Tab: Comparison-Adjusted Funnel Plot ---
    output$funnelPlotAdj <- renderPlot({
      req(analysisResult())
      res <- analysisResult()
      funnel(res$model, order = res$model$trts, pch = 19, method.bias = "Egger")
    })
    output$dlFunnelAdjPNG <- downloadHandler(
      filename = function() { "ComparisonAdjustedFunnelPlot.png" },
      content = function(file) {
        png(file, width = 800, height = 600, units = "px", res = 96)
        req(analysisResult())
        res <- analysisResult()
        funnel(res$model, order = res$model$trts, pch = 19, method.bias = "Egger")
        dev.off()
      }
    )
    
    # --- New Tab: Leave-One-Out Analysis ---
    output$leaveOneOut <- renderDT({
      req(analysisResult())
      res <- analysisResult()
      if(exists("leave1out", envir = asNamespace("netmeta"))) {
        loo <- netmeta:::leave1out(res$model)
      } else {
        loo <- data.frame(Message = "leave1out function not available.")
      }
      datatable(loo, options = list(pageLength = 10))
    })
    output$dlLeaveOneOut <- downloadHandler(
      filename = function() { "LeaveOneOutAnalysis.csv" },
      content = function(file) {
        req(analysisResult())
        res <- analysisResult()
        if(exists("leave1out", envir = asNamespace("netmeta"))) {
          loo <- netmeta:::leave1out(res$model)
          write.csv(loo, file, row.names = FALSE)
        } else {
          write.csv(data.frame(Message = "leave1out function not available."), file, row.names = FALSE)
        }
      }
    )
    
    # --- New Tab: Detailed Model Summary ---
    output$detailedModelSummary <- renderPrint({
      req(analysisResult())
      res <- analysisResult()
      summary(res$model)
    })
    output$dlDetailedModelSummary <- downloadHandler(
      filename = function() { "DetailedModelSummary.txt" },
      content = function(file) {
        req(analysisResult())
        res <- analysisResult()
        txt <- capture.output(summary(res$model))
        writeLines(txt, con = file)
      }
    )
    
    # --- New Tab: Study-Level Analysis ---
    output$studyLevelPlot <- renderPlot({
      req(analysisResult())
      model <- analysisResult()$model
      if (!is.null(model$data)) {
        if (all(c("TE", "seTE") %in% names(model$data))) {
          boxplot(TE ~ studlab, data = model$data, main = "Boxplot of Log HR by Study",
                  xlab = "Study", ylab = "Log Hazard Ratio")
        } else {
          studies <- unique(model$data$studlab)
          eff <- sapply(studies, function(s) {
            subset_data <- subset(model$data, studlab == s)
            mean(subset_data$TE, na.rm = TRUE)
          })
          eff <- eff[!is.na(eff)]
          if(length(eff)==0) {
            plot.new(); text(0.5,0.5,"No study-level effect available")
          } else {
            barplot(eff, main = "Average Log HR by Study", xlab = "Study", ylab = "Average Log HR", las = 2)
          }
        }
      } else {
        plot.new()
        text(0.5, 0.5, "Study-level plot not available.")
      }
    })
    output$studyLevelSummary <- renderPrint({
      req(analysisResult())
      model <- analysisResult()$model
      if (!is.null(model$data)) {
        cat("Study-level Summary:\n")
        print(summary(model$data))
      } else {
        cat("No study-level data available.")
      }
    })
    output$dlStudyLevel <- downloadHandler(
      filename = function() { "StudyLevelAnalysis.txt" },
      content = function(file) {
        model <- analysisResult()$model
        txt <- capture.output({
          if (!is.null(model$data)) {
            cat("Study-level Summary:\n")
            print(summary(model$data))
          } else {
            cat("Study-level analysis not available.")
          }
        })
        writeLines(txt, con = file)
      }
    )
    
    # --- New Tab: Additional Text Results ---
    output$textResults <- renderPrint({
      req(analysisResult())
      res <- analysisResult()
      cat("=== Additional Text Summary ===\n\n")
      cat("Treatments:\n")
      print(res$model$trts)
      cat("\nNumber of included studies:", res$model$k, "\n")
      cat("Number of treatments:", res$model$nt, "\n")
      cat("\nFixed-Effect Estimate Matrix (HR):\n")
      print(round(exp(res$model$TE.fixed), 2))
      cat("\nHeterogeneity (I-squared):", res$model$I2, "\n")
      cat("Q statistic:", res$model$Q, "\n")
    })
    output$dlTextResults <- downloadHandler(
      filename = function() { "AdditionalTextResults.txt" },
      content = function(file) {
        req(analysisResult())
        res <- analysisResult()
        txt <- capture.output({
          cat("=== Additional Text Summary ===\n\n")
          cat("Treatments:\n")
          print(res$model$trts)
          cat("\nNumber of included studies:", res$model$k, "\n")
          cat("Number of treatments:", res$model$nt, "\n")
          cat("\nFixed-Effect Estimate Matrix (HR):\n")
          print(round(exp(res$model$TE.fixed), 2))
          cat("\nHeterogeneity (I-squared):", res$model$I2, "\n")
          cat("Q statistic:", res$model$Q, "\n")
        })
        writeLines(txt, con = file)
      }
    )
  })
}

# ---------------------------
# 7. Inconsistency Module (Text & Download)
# ---------------------------
inconsistencyUI <- function(id) {
  ns <- NS(id)
  tagList(
    h4("Design-based Inconsistency (Decomposition of Q)"),
    verbatimTextOutput(ns("decompText")),
    br(),
    downloadButton(ns("dlDecompText"), "Download Inconsistency Summary as TXT")
  )
}

inconsistencyServer <- function(id, analysisResult) {
  moduleServer(id, function(input, output, session) {
    decomp_res <- reactive({
      req(analysisResult())
      res <- analysisResult()
      if (res$method == "freq") {
        decomp.design(res$model)
      } else {
        NULL
      }
    })
    
    output$decompText <- renderPrint({
      req(decomp_res())
      print(decomp_res())
    })
    
    output$dlDecompText <- downloadHandler(
      filename = function() { "InconsistencySummary.txt" },
      content = function(file) {
        res <- analysisResult()
        if (res$method == "freq") {
          decomp_out <- decomp.design(res$model)
          txt <- capture.output(print(decomp_out))
          writeLines(txt, con = file)
        } else {
          writeLines("Design-based inconsistency not available.", con = file)
        }
      }
    )
  })
}

# ---------------------------
# 8. Example CSV Files Module
# ---------------------------
exampleCSVUI <- function(id) {
  ns <- NS(id)
  tagList(
    h3("Example CSV Files"),
    h4("Arm-level Data Example"),
    verbatimTextOutput(ns("armCSV")),
    downloadButton(ns("dlArmCSV"), "Download Arm-level CSV"),
    br(), br(),
    h4("Contrast-level Data Example"),
    verbatimTextOutput(ns("contrastCSV")),
    downloadButton(ns("dlContrastCSV"), "Download Contrast-level CSV")
  )
}

exampleCSVServer <- function(id) {
  moduleServer(id, function(input, output, session) {
    armCSV <- "study,treatment,mean,sd,n
Study1,DrugA,2.5,0.5,30
Study1,DrugB,1.8,0.6,30
Study2,DrugA,3.0,0.7,25
Study2,DrugB,2.7,0.6,25
Study2,DrugC,2.9,0.8,25
Study3,DrugA,4.1,1.1,40
Study3,DrugB,3.2,0.9,40
Study3,DrugC,3.4,1.0,40
Study3,DrugD,3.1,1.2,40
Study4,DrugB,2.0,0.4,20
Study4,DrugC,2.5,0.3,20
Study4,DrugD,1.9,0.5,20
Study5,DrugA,3.1,0.6,35
Study5,DrugD,2.2,0.7,35"
    
    contrastCSV <- "studlab,treat1,treat2,TE,seTE
Study1,DrugA,DrugB,0.7,0.2
Study2,DrugA,DrugB,0.3,0.25
Study2,DrugA,DrugC,0.1,0.3
Study2,DrugB,DrugC,-0.2,0.15
Study3,DrugA,DrugB,1.0,0.3
Study3,DrugA,DrugC,0.8,0.35
Study3,DrugA,DrugD,0.9,0.4
Study3,DrugB,DrugC,0.2,0.2
Study3,DrugB,DrugD,0.1,0.25
Study3,DrugC,DrugD,-0.1,0.3
Study4,DrugB,DrugC,0.5,0.2
Study4,DrugB,DrugD,0.3,0.25
Study4,DrugC,DrugD,0.2,0.15
Study5,DrugA,DrugD,0.4,0.2"
    
    output$armCSV <- renderText({ armCSV })
    output$contrastCSV <- renderText({ contrastCSV })
    
    output$dlArmCSV <- downloadHandler(
      filename = function() { "example_arm_data.csv" },
      content = function(file) {
        writeLines(armCSV, con = file)
      }
    )
    
    output$dlContrastCSV <- downloadHandler(
      filename = function() { "example_contrast_data.csv" },
      content = function(file) {
        writeLines(contrastCSV, con = file)
      }
    )
  })
}

# ---------------------------
# 9. Main App UI & Server (bs4Dash)
# ---------------------------
ui <- bs4DashPage(
  title = "786-MIII NMA Shiny App (Frequentist Only - Hazard Ratio)",
  header = bs4DashNavbar(title = "786-MIII NMA Shiny App"),
  sidebar = bs4DashSidebar(
    bs4SidebarMenu(
      bs4SidebarMenuItem("Data Upload", tabName = "dataUpload", icon = icon("upload")),
      bs4SidebarMenuItem("Network Plot", tabName = "network", icon = icon("project-diagram")),
      bs4SidebarMenuItem("Analysis", tabName = "analysis", icon = icon("chart-line")),
      bs4SidebarMenuItem("Diagnostics", tabName = "diagnostics", icon = icon("stethoscope")),
      bs4SidebarMenuItem("Results", tabName = "results", icon = icon("table")),
      bs4SidebarMenuItem("Inconsistency", tabName = "inconsistency", icon = icon("exclamation-triangle")),
      bs4SidebarMenuItem("Example CSV Files", tabName = "exampleCSV", icon = icon("file-alt"))
    )
  ),
  body = bs4DashBody(
    bs4TabItems(
      bs4TabItem(tabName = "dataUpload", dataUploadUI("dataUpload")),
      bs4TabItem(tabName = "network", networkUI("network")),
      bs4TabItem(tabName = "analysis", analysisUI("analysis")),
      bs4TabItem(tabName = "diagnostics", diagnosticsUI("diagnostics")),
      bs4TabItem(tabName = "results", resultsUI("results")),
      bs4TabItem(tabName = "inconsistency", inconsistencyUI("inconsistency")),
      bs4TabItem(tabName = "exampleCSV", exampleCSVUI("exampleCSV"))
    )
  )
)

server <- function(input, output, session) {
  dataset <- dataUploadServer("dataUpload")
  analysisRes <- analysisServer("analysis", data = dataset)
  networkServer("network", data = dataset)
  resultsServer("results", analysisResult = analysisRes)
  diagnosticsServer("diagnostics", analysisResult = analysisRes)
  inconsistencyServer("inconsistency", analysisResult = analysisRes)
  exampleCSVServer("exampleCSV")
}

shinyApp(ui = ui, server = server)
